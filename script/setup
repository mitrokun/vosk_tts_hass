#!/usr/bin/env python3
import argparse
import subprocess
import venv
from pathlib import Path

# --- Определяем пути ---
# _DIR - папка, где находится этот скрипт (scripts/)
_DIR = Path(__file__).parent
# _PROGRAM_DIR - корневая папка проекта, на уровень выше
_PROGRAM_DIR = _DIR.parent
# _VENV_DIR - папка для виртуального окружения в корне проекта
_VENV_DIR = _PROGRAM_DIR / ".venv"

# --- Парсим аргументы командной строки ---
parser = argparse.ArgumentParser(
    description="Set up virtual environment and install dependencies for wyoming_vosk"
)
parser.add_argument(
    "--dev", action="store_true", help="Install development requirements"
)
args = parser.parse_args()

# --- Создаём виртуальное окружение ---
print(f"Creating virtual environment in {_VENV_DIR}...")
builder = venv.EnvBuilder(with_pip=True, upgrade_deps=True)
context = builder.ensure_directories(_VENV_DIR)
builder.create(_VENV_DIR)
print("Virtual environment created.")

# --- Устанавливаем зависимости ---
# Путь к исполняемому файлу pip внутри .venv
pip_exe = context.env_exe
pip_cmd = [pip_exe, "-m", "pip"]

# Устанавливаем зависимости из requirements.txt
requirements_file = _PROGRAM_DIR / "requirements.txt"
print(f"Installing dependencies from {requirements_file}...")
if requirements_file.exists():
    subprocess.check_call(pip_cmd + ["install", "-r", str(requirements_file)])
else:
    print(f"Error: {requirements_file} not found")
    exit(1)

# Устанавливаем dev-зависимости, если указан флаг --dev
if args.dev:
    dev_requirements_file = _PROGRAM_DIR / "requirements_dev.txt"
    if dev_requirements_file.exists():
        print(f"Installing development dependencies from {dev_requirements_file}...")
        subprocess.check_call(pip_cmd + ["install", "-r", str(dev_requirements_file)])
    else:
        print(
            f"Warning: --dev flag was used, but {dev_requirements_file} not found. Skipping."
        )

print("\nInstallation complete!")
print(f"To run the server, use: python3 {_DIR / 'run'}")